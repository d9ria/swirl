| Missing values play an important role in statistics and data analysis. Often, missing
| values must not be ignored, but rather they should be carefully studied to see if
| there's an underlying pattern or cause for their missingness.

...

  |====                                                                          |   5%

| In R, NA is used to represent any value that is 'not available' or 'missing' (in the
| statistical sense). In this lesson, we'll explore missing values further.

...

  |========                                                                      |  11%

| Any operation involving NA generally yields NA as the result. To illustrate, let's
| create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| Your dedication is inspiring!

  |============                                                                  |  16%

| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You nailed it! Good job!

  |================                                                              |  21%

| Notice that the elements of the resulting vector that correspond with the NA values
| in x are also NA.

...

  |=====================                                                         |  26%

| To make things a little more interesting, lets create a vector containing 1000 draws
| from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| Keep up the great work!

  |=========================                                                     |  32%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| Your dedication is inspiring!

  |=============================                                                 |  37%

| Finally, let's select 100 elements at random from these 2000 values (combining y and
| z) such that we don't know how many NAs we'll wind up with or what positions they'll
| occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| That's the answer I was looking for.

  |=================================                                             |  42%

| Let's first ask the question of where our NAs are located in our data. The is.na()
| function tells us whether each element of a vector is NA. Call is.na() on my_data and
| assign the result to my_na.

> my_na <- is.na(my_data)

| You nailed it! Good job!

  |=====================================                                         |  47%

| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE
 [14] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
 [27]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [40] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
 [53]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
 [66]  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE
 [79] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
 [92] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE

| You got it right!

  |=========================================                                     |  53%

| Everywhere you see a TRUE, you know the corresponding element of my_data is NA.
| Likewise, everywhere you see a FALSE, you know the corresponding element of my_data
| is one of our random draws from the standard normal distribution.

...

  |=============================================                                 |  58%

| In our previous discussion of logical operators, we introduced the `==` operator as a
| method of testing for equality between two objects. So, you might think the
| expression my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [28] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [55] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [82] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| That's the answer I was looking for.

  |=================================================                             |  63%

| The reason you got a vector of all NAs is that NA is not really a value, but just a
| placeholder for a quantity that is not available. Therefore the logical expression is
| incomplete and R has no choice but to return a vector of the same length as my_data
| that contains all NAs.

...

  |=====================================================                         |  68%

| Don't worry if that's a little confusing. The key takeaway is to be cautious when
| using logical expressions anytime NAs might creep in, since a single NA value can
| derail the entire thing.

...

  |=========================================================                     |  74%

| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for
| every NA and FALSE for every numeric value, we can compute the total number of NAs in
| our data.

...

  |==============================================================                |  79%

| The trick is to recognize that underneath the surface, R represents TRUE as the
| number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of TRUEs
| and FALSEs, we get the total number of TRUEs.

...

  |==================================================================            |  84%

| Let's give that a try here. Call the sum() function on my_na to count the total
| number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't assign
| the result to a new variable.

> sum(my_na)
[1] 52

| That's a job well done!

  |======================================================================        |  89%

| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that
| everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA          NA          NA  0.71371096          NA -0.90121273
  [7]          NA          NA          NA -0.80198180 -1.13446988 -0.62204045
 [13]          NA  0.42025016 -0.28096367          NA -0.47590365          NA
 [19] -1.03790216          NA          NA -0.74899408 -1.37902165  0.17866039
 [25]          NA -0.62694645          NA -0.87855783          NA          NA
 [31]          NA          NA -1.75883305 -0.06878381  0.27098277 -0.27636184
 [37]  0.56597505 -1.97491208  1.28313636  0.97625155          NA          NA
 [43]  1.42931883 -2.08088877          NA -1.37401123  0.50615116          NA
 [49] -0.87894980          NA -0.73057990  2.65022408          NA          NA
 [55]          NA          NA  0.65655550 -0.57556828          NA          NA
 [61] -0.05595813          NA          NA          NA          NA          NA
 [67]  1.39347361 -0.20039919          NA          NA          NA          NA
 [73]          NA          NA -0.76027537          NA -0.79477732  2.05627382
 [79]  0.32308619  0.43970501  0.85736451          NA  0.34700308 -1.10757143
 [85] -0.41633298  0.57274052          NA          NA          NA          NA
 [91]          NA -0.18775290          NA          NA  0.78995883  1.55638180
 [97]          NA          NA          NA  0.17404185

| You are doing so well!

  |==========================================================================    |  95%

| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN,
| which stands for 'not a number'. To generate NaN, try dividing (using a forward
| slash) 0 by 0 now.

> 0 / 0
[1] NaN

| You are quite good my friend!

  |==============================================================================| 100%

| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you
| subtract Inf from Inf?

> Inf - Inf
[1] NaN

| That's correct!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: No

| You've reached the end of this lesson! Returning to the main menu...
